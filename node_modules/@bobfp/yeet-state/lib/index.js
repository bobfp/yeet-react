"use strict";

exports.__esModule = true;
exports.createStore = void 0;

function _objectSpread2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var createStore = function createStore(initialValue) {
  var store = initialValue;
  var callbacks = Object.keys(initialValue).reduce(function (cbs, atom) {
    return _objectSpread2({}, cbs, _defineProperty({}, atom, {}));
  }, {});

  var getAtom = function getAtom(atom) {
    return store[atom];
  };

  var _setAtom = function _setAtom(atom) {
    return function (transformer) {
      var newState = transformer(store[atom]);
      store[atom] = newState;
      return newState;
    };
  };

  var subscribe = function subscribe(atom) {
    return function (cb) {
      var cbID = Symbol(atom);
      callbacks[atom][cbID] = cb;
      return function () {
        delete callbacks[atom][cbID];
      };
    };
  };

  var publish = function publish(atom) {
    return function (transformer) {
      var newState = _setAtom(atom)(transformer);

      var cbIDs = Object.getOwnPropertySymbols(callbacks[atom]);
      cbIDs.forEach(function (cbID) {
        callbacks[atom][cbID](newState);
      });
    };
  };

  return {
    getAtom: getAtom,
    subscribe: subscribe,
    publish: publish
  };
};

exports.createStore = createStore;